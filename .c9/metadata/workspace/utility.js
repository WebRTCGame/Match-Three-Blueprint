{"filter":false,"title":"utility.js","tooltip":"/utility.js","undoManager":{"mark":100,"position":100,"stack":[[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":16},"end":{"row":43,"column":20}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":20},"end":{"row":43,"column":24}},"text":"    "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":24},"end":{"row":43,"column":25}},"text":"f"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":25},"end":{"row":43,"column":26}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":26},"end":{"row":43,"column":27}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":27},"end":{"row":43,"column":28}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":28},"end":{"row":43,"column":29}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":29},"end":{"row":43,"column":30}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":30},"end":{"row":43,"column":31}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":31},"end":{"row":43,"column":32}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":32},"end":{"row":43,"column":33}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":33},"end":{"row":43,"column":34}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":34},"end":{"row":43,"column":35}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":35},"end":{"row":43,"column":36}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":36},"end":{"row":43,"column":37}},"text":"q"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":37},"end":{"row":43,"column":38}},"text":"B"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":38},"end":{"row":43,"column":39}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":39},"end":{"row":43,"column":40}},"text":"P"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":40},"end":{"row":43,"column":41}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":41},"end":{"row":43,"column":42}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":42},"end":{"row":43,"column":43}},"text":"p"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":43},"end":{"row":43,"column":45}},"text":"()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":44},"end":{"row":43,"column":45}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":43,"column":44},"end":{"row":43,"column":45}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":44},"end":{"row":43,"column":45}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":45},"end":{"row":43,"column":46}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":46},"end":{"row":43,"column":47}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":47},"end":{"row":43,"column":48}},"text":"A"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":48},"end":{"row":43,"column":49}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":49},"end":{"row":43,"column":50}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":50},"end":{"row":43,"column":51}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":51},"end":{"row":43,"column":52}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":53},"end":{"row":43,"column":54}},"text":"{"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":54},"end":{"row":43,"column":55}},"text":"}"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":55},"end":{"row":43,"column":57}},"text":"''"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":43,"column":55},"end":{"row":43,"column":57}},"text":"''"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":55},"end":{"row":43,"column":56}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":43,"column":54},"end":{"row":44,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":44,"column":0},"end":{"row":45,"column":0}},"lines":["                            "]},{"action":"insertText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":24}},"text":"                        "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":28},"end":{"row":44,"column":29}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":29},"end":{"row":44,"column":30}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":30},"end":{"row":44,"column":31}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":31},"end":{"row":44,"column":32}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":32},"end":{"row":44,"column":33}},"text":"r"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":33},"end":{"row":44,"column":34}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":34},"end":{"row":44,"column":35}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":35},"end":{"row":44,"column":60}},"text":"uniqBy(a, JSON.stringify)"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":42},"end":{"row":44,"column":43}},"text":"a"},{"action":"insertText","range":{"start":{"row":44,"column":42},"end":{"row":44,"column":43}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":43},"end":{"row":44,"column":44}},"text":"h"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":44},"end":{"row":44,"column":45}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":45},"end":{"row":44,"column":46}},"text":"A"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":44,"column":42},"end":{"row":44,"column":46}},"text":"theA"},{"action":"insertText","range":{"start":{"row":44,"column":42},"end":{"row":44,"column":50}},"text":"theArray"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":44,"column":67},"end":{"row":44,"column":68}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":43,"column":0},"end":{"row":43,"column":2}},"text":"  "},{"action":"insertText","range":{"start":{"row":43,"column":0},"end":{"row":44,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":44,"column":51},"end":{"row":44,"column":52}},"text":" "},{"action":"removeText","range":{"start":{"row":45,"column":0},"end":{"row":45,"column":2}},"text":"  "},{"action":"removeText","range":{"start":{"row":46,"column":0},"end":{"row":46,"column":2}},"text":"  "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":46,"column":24},"end":{"row":47,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":22}},"text":"                      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":91,"column":23},"end":{"row":92,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":92,"column":0},"end":{"row":92,"column":22}},"text":"                      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":92,"column":22},"end":{"row":92,"column":25}},"text":"/**"},{"action":"insertText","range":{"start":{"row":92,"column":25},"end":{"row":93,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":93,"column":0},"end":{"row":288,"column":0}},"lines":[" * Normalize the browser animation API across implementations. This requests"," * the browser to schedule a repaint of the window for the next animation frame."," * Checks for cross-browser support, and, failing to find it, falls back to setTimeout."," * @param {function}    callback  Function to call when it's time to update your animation for the next repaint."," * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation."," * @return {number} Animation frame request."," */","if (!window.requestAnimationFrame) {","  window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||","                                  window.mozRequestAnimationFrame ||","                                  window.msRequestAnimationFrame ||","                                  window.oRequestAnimationFrame ||","                                  function (callback) {","                                    return window.setTimeout(callback, 17 /*~ 1000/60*/);","                                  });","}","","/**"," * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec."," *"," * Cancels an animation frame request."," * Checks for cross-browser support, falls back to clearTimeout."," * @param {number}  Animation frame request."," */","if (!window.cancelAnimationFrame) {","  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||","                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||","                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||","                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||","                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||","                                 window.clearTimeout);","}","","/* Object that contains our utility functions."," * Attached to the window object which acts as the global namespace."," */","window.utils = {};","","/**"," * Keeps track of the current mouse position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, event"," */","window.utils.captureMouse = function (element) {","  var mouse = {x: 0, y: 0, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","  ","  element.addEventListener('mousemove', function (event) {","    var x, y;","    ","    if (event.pageX || event.pageY) {","      x = event.pageX;","      y = event.pageY;","    } else {","      x = event.clientX + body_scrollLeft + element_scrollLeft;","      y = event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    mouse.x = x;","    mouse.y = y;","    mouse.event = event;","  }, false);","  ","  return mouse;","};","","/**"," * Keeps track of the current (first) touch position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, isPressed, event"," */","window.utils.captureTouch = function (element) {","  var touch = {x: null, y: null, isPressed: false, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","","  element.addEventListener('touchstart', function (event) {","    touch.isPressed = true;","    touch.event = event;","  }, false);","","  element.addEventListener('touchend', function (event) {","    touch.isPressed = false;","    touch.x = null;","    touch.y = null;","    touch.event = event;","  }, false);","  ","  element.addEventListener('touchmove', function (event) {","    var x, y,","        touch_event = event.touches[0]; //first touch","    ","    if (touch_event.pageX || touch_event.pageY) {","      x = touch_event.pageX;","      y = touch_event.pageY;","    } else {","      x = touch_event.clientX + body_scrollLeft + element_scrollLeft;","      y = touch_event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    touch.x = x;","    touch.y = y;","    touch.event = event;","  }, false);","  ","  return touch;","};","","/**"," * Returns a color in the format: '#RRGGBB', or as a hex number if specified."," * @param {number|string} color"," * @param {boolean=}      toNumber=false  Return color as a hex number."," * @return {string|number}"," */","window.utils.parseColor = function (color, toNumber) {","  if (toNumber === true) {","    if (typeof color === 'number') {","      return (color | 0); //chop off decimal","    }","    if (typeof color === 'string' && color[0] === '#') {","      color = color.slice(1);","    }","    return window.parseInt(color, 16);","  } else {","    if (typeof color === 'number') {","      color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad","    }","    return color;","  }","};","","/**"," * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'"," * @param {number|string} color"," * @param {number}        alpha"," * @return {string}"," */","window.utils.colorToRGB = function (color, alpha) {","  //number in octal format or string prefixed with #","  if (typeof color === 'string' && color[0] === '#') {","    color = window.parseInt(color.slice(1), 16);","  }","  alpha = (alpha === undefined) ? 1 : alpha;","  //parse hex values","  var r = color >> 16 & 0xff,","      g = color >> 8 & 0xff,","      b = color & 0xff,","      a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);","  //only use 'rgba' if needed","  if (a === 1) {","    return \"rgb(\"+ r +\",\"+ g +\",\"+ b +\")\";","  } else {","    return \"rgba(\"+ r +\",\"+ g +\",\"+ b +\",\"+ a +\")\";","  }","};","","/**"," * Determine if a rectangle contains the coordinates (x,y) within it's boundaries."," * @param {object}  rect  Object with properties: x, y, width, height."," * @param {number}  x     Coordinate position x."," * @param {number}  y     Coordinate position y."," * @return {boolean}"," */","window.utils.containsPoint = function (rect, x, y) {","  return !(x < rect.x ||","           x > rect.x + rect.width ||","           y < rect.y ||","           y > rect.y + rect.height);","};","","/**"," * Determine if two rectangles overlap."," * @param {object}  rectA Object with properties: x, y, width, height."," * @param {object}  rectB Object with properties: x, y, width, height."," * @return {boolean}"," */","window.utils.intersects = function (rectA, rectB) {","  return !(rectA.x + rectA.width < rectB.x ||","           rectB.x + rectB.width < rectA.x ||","           rectA.y + rectA.height < rectB.y ||","           rectB.y + rectB.height < rectA.y);","};"]}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":47,"column":0},"end":{"row":47,"column":22}},"text":"                      "},{"action":"insertText","range":{"start":{"row":88,"column":26},"end":{"row":88,"column":30}},"text":"    "},{"action":"insertText","range":{"start":{"row":90,"column":0},"end":{"row":90,"column":4}},"text":"    "},{"action":"insertText","range":{"start":{"row":90,"column":90},"end":{"row":91,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":91,"column":0},"end":{"row":107,"column":0}},"lines":["                          }","                          /**","                           * Normalize the browser animation API across implementations. This requests","                           * the browser to schedule a repaint of the window for the next animation frame.","                           * Checks for cross-browser support, and, failing to find it, falls back to setTimeout.","                           * @param {function}    callback  Function to call when it's time to update your animation for the next repaint.","                           * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation.","                           * @return {number} Animation frame request.","                           */","                      if (!window.requestAnimationFrame) {","                          window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||","                              window.mozRequestAnimationFrame ||","                              window.msRequestAnimationFrame ||","                              window.oRequestAnimationFrame ||","                              function(callback) {","                                  return window.setTimeout(callback, 17 /*~ 1000/60*/ );"]},{"action":"insertText","range":{"start":{"row":107,"column":0},"end":{"row":107,"column":33}},"text":"                              });"},{"action":"insertText","range":{"start":{"row":109,"column":0},"end":{"row":110,"column":0}},"text":"\n"},{"action":"removeLines","range":{"start":{"row":112,"column":0},"end":{"row":306,"column":0}},"nl":"\n","lines":[" * the browser to schedule a repaint of the window for the next animation frame."," * Checks for cross-browser support, and, failing to find it, falls back to setTimeout."," * @param {function}    callback  Function to call when it's time to update your animation for the next repaint."," * @param {HTMLElement} element   Optional parameter specifying the element that visually bounds the entire animation."," * @return {number} Animation frame request."," */","if (!window.requestAnimationFrame) {","  window.requestAnimationFrame = (window.webkitRequestAnimationFrame ||","                                  window.mozRequestAnimationFrame ||","                                  window.msRequestAnimationFrame ||","                                  window.oRequestAnimationFrame ||","                                  function (callback) {","                                    return window.setTimeout(callback, 17 /*~ 1000/60*/);","                                  });","}","","/**"," * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec."," *"," * Cancels an animation frame request."," * Checks for cross-browser support, falls back to clearTimeout."," * @param {number}  Animation frame request."," */","if (!window.cancelAnimationFrame) {","  window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||","                                 window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||","                                 window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||","                                 window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||","                                 window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||","                                 window.clearTimeout);","}","","/* Object that contains our utility functions."," * Attached to the window object which acts as the global namespace."," */","window.utils = {};","","/**"," * Keeps track of the current mouse position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, event"," */","window.utils.captureMouse = function (element) {","  var mouse = {x: 0, y: 0, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","  ","  element.addEventListener('mousemove', function (event) {","    var x, y;","    ","    if (event.pageX || event.pageY) {","      x = event.pageX;","      y = event.pageY;","    } else {","      x = event.clientX + body_scrollLeft + element_scrollLeft;","      y = event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    mouse.x = x;","    mouse.y = y;","    mouse.event = event;","  }, false);","  ","  return mouse;","};","","/**"," * Keeps track of the current (first) touch position, relative to an element."," * @param {HTMLElement} element"," * @return {object} Contains properties: x, y, isPressed, event"," */","window.utils.captureTouch = function (element) {","  var touch = {x: null, y: null, isPressed: false, event: null},","      body_scrollLeft = document.body.scrollLeft,","      element_scrollLeft = document.documentElement.scrollLeft,","      body_scrollTop = document.body.scrollTop,","      element_scrollTop = document.documentElement.scrollTop,","      offsetLeft = element.offsetLeft,","      offsetTop = element.offsetTop;","","  element.addEventListener('touchstart', function (event) {","    touch.isPressed = true;","    touch.event = event;","  }, false);","","  element.addEventListener('touchend', function (event) {","    touch.isPressed = false;","    touch.x = null;","    touch.y = null;","    touch.event = event;","  }, false);","  ","  element.addEventListener('touchmove', function (event) {","    var x, y,","        touch_event = event.touches[0]; //first touch","    ","    if (touch_event.pageX || touch_event.pageY) {","      x = touch_event.pageX;","      y = touch_event.pageY;","    } else {","      x = touch_event.clientX + body_scrollLeft + element_scrollLeft;","      y = touch_event.clientY + body_scrollTop + element_scrollTop;","    }","    x -= offsetLeft;","    y -= offsetTop;","    ","    touch.x = x;","    touch.y = y;","    touch.event = event;","  }, false);","  ","  return touch;","};","","/**"," * Returns a color in the format: '#RRGGBB', or as a hex number if specified."," * @param {number|string} color"," * @param {boolean=}      toNumber=false  Return color as a hex number."," * @return {string|number}"," */","window.utils.parseColor = function (color, toNumber) {","  if (toNumber === true) {","    if (typeof color === 'number') {","      return (color | 0); //chop off decimal","    }","    if (typeof color === 'string' && color[0] === '#') {","      color = color.slice(1);","    }","    return window.parseInt(color, 16);","  } else {","    if (typeof color === 'number') {","      color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad","    }","    return color;","  }","};","","/**"," * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'"," * @param {number|string} color"," * @param {number}        alpha"," * @return {string}"," */","window.utils.colorToRGB = function (color, alpha) {","  //number in octal format or string prefixed with #","  if (typeof color === 'string' && color[0] === '#') {","    color = window.parseInt(color.slice(1), 16);","  }","  alpha = (alpha === undefined) ? 1 : alpha;","  //parse hex values","  var r = color >> 16 & 0xff,","      g = color >> 8 & 0xff,","      b = color & 0xff,","      a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);","  //only use 'rgba' if needed","  if (a === 1) {","    return \"rgb(\"+ r +\",\"+ g +\",\"+ b +\")\";","  } else {","    return \"rgba(\"+ r +\",\"+ g +\",\"+ b +\",\"+ a +\")\";","  }","};","","/**"," * Determine if a rectangle contains the coordinates (x,y) within it's boundaries."," * @param {object}  rect  Object with properties: x, y, width, height."," * @param {number}  x     Coordinate position x."," * @param {number}  y     Coordinate position y."," * @return {boolean}"," */","window.utils.containsPoint = function (rect, x, y) {","  return !(x < rect.x ||","           x > rect.x + rect.width ||","           y < rect.y ||","           y > rect.y + rect.height);","};","","/**"," * Determine if two rectangles overlap."," * @param {object}  rectA Object with properties: x, y, width, height."," * @param {object}  rectB Object with properties: x, y, width, height."," * @return {boolean}"," */","window.utils.intersects = function (rectA, rectB) {","  return !(rectA.x + rectA.width < rectB.x ||","           rectB.x + rectB.width < rectA.x ||","           rectA.y + rectA.height < rectB.y ||","           rectB.y + rectB.height < rectA.y);","};"]},{"action":"removeText","range":{"start":{"row":111,"column":1},"end":{"row":111,"column":76}},"text":"* Normalize the browser animation API across implementations. This requests"},{"action":"removeText","range":{"start":{"row":111,"column":1},"end":{"row":112,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":111,"column":1},"end":{"row":111,"column":151}},"text":"                      * ERRATA: 'cancelRequestAnimationFrame' renamed to 'cancelAnimationFrame' to reflect an update to the W3C Animation-Timing Spec."},{"action":"insertText","range":{"start":{"row":111,"column":151},"end":{"row":112,"column":0}},"text":"\n"},{"action":"insertLines","range":{"start":{"row":112,"column":0},"end":{"row":301,"column":0}},"lines":["                       *","                       * Cancels an animation frame request.","                       * Checks for cross-browser support, falls back to clearTimeout.","                       * @param {number}  Animation frame request.","                       */","                      if (!window.cancelAnimationFrame) {","                          window.cancelAnimationFrame = (window.cancelRequestAnimationFrame ||","                              window.webkitCancelAnimationFrame || window.webkitCancelRequestAnimationFrame ||","                              window.mozCancelAnimationFrame || window.mozCancelRequestAnimationFrame ||","                              window.msCancelAnimationFrame || window.msCancelRequestAnimationFrame ||","                              window.oCancelAnimationFrame || window.oCancelRequestAnimationFrame ||","                              window.clearTimeout);","                      }","","                      /* Object that contains our utility functions.","                       * Attached to the window object which acts as the global namespace.","                       */","                      window.utils = {};","","                      /**","                       * Keeps track of the current mouse position, relative to an element.","                       * @param {HTMLElement} element","                       * @return {object} Contains properties: x, y, event","                       */","                      window.utils.captureMouse = function(element) {","                          var mouse = {","                                  x: 0,","                                  y: 0,","                                  event: null","                              },","                              body_scrollLeft = document.body.scrollLeft,","                              element_scrollLeft = document.documentElement.scrollLeft,","                              body_scrollTop = document.body.scrollTop,","                              element_scrollTop = document.documentElement.scrollTop,","                              offsetLeft = element.offsetLeft,","                              offsetTop = element.offsetTop;","","                          element.addEventListener('mousemove', function(event) {","                              var x, y;","","                              if (event.pageX || event.pageY) {","                                  x = event.pageX;","                                  y = event.pageY;","                              }","                              else {","                                  x = event.clientX + body_scrollLeft + element_scrollLeft;","                                  y = event.clientY + body_scrollTop + element_scrollTop;","                              }","                              x -= offsetLeft;","                              y -= offsetTop;","","                              mouse.x = x;","                              mouse.y = y;","                              mouse.event = event;","                          }, false);","","                          return mouse;","                      };","","                      /**","                       * Keeps track of the current (first) touch position, relative to an element.","                       * @param {HTMLElement} element","                       * @return {object} Contains properties: x, y, isPressed, event","                       */","                      window.utils.captureTouch = function(element) {","                          var touch = {","                                  x: null,","                                  y: null,","                                  isPressed: false,","                                  event: null","                              },","                              body_scrollLeft = document.body.scrollLeft,","                              element_scrollLeft = document.documentElement.scrollLeft,","                              body_scrollTop = document.body.scrollTop,","                              element_scrollTop = document.documentElement.scrollTop,","                              offsetLeft = element.offsetLeft,","                              offsetTop = element.offsetTop;","","                          element.addEventListener('touchstart', function(event) {","                              touch.isPressed = true;","                              touch.event = event;","                          }, false);","","                          element.addEventListener('touchend', function(event) {","                              touch.isPressed = false;","                              touch.x = null;","                              touch.y = null;","                              touch.event = event;","                          }, false);","","                          element.addEventListener('touchmove', function(event) {","                              var x, y,","                                  touch_event = event.touches[0]; //first touch","","                              if (touch_event.pageX || touch_event.pageY) {","                                  x = touch_event.pageX;","                                  y = touch_event.pageY;","                              }","                              else {","                                  x = touch_event.clientX + body_scrollLeft + element_scrollLeft;","                                  y = touch_event.clientY + body_scrollTop + element_scrollTop;","                              }","                              x -= offsetLeft;","                              y -= offsetTop;","","                              touch.x = x;","                              touch.y = y;","                              touch.event = event;","                          }, false);","","                          return touch;","                      };","","                      /**","                       * Returns a color in the format: '#RRGGBB', or as a hex number if specified.","                       * @param {number|string} color","                       * @param {boolean=}      toNumber=false  Return color as a hex number.","                       * @return {string|number}","                       */","                      window.utils.parseColor = function(color, toNumber) {","                          if (toNumber === true) {","                              if (typeof color === 'number') {","                                  return (color | 0); //chop off decimal","                              }","                              if (typeof color === 'string' && color[0] === '#') {","                                  color = color.slice(1);","                              }","                              return window.parseInt(color, 16);","                          }","                          else {","                              if (typeof color === 'number') {","                                  color = '#' + ('00000' + (color | 0).toString(16)).substr(-6); //pad","                              }","                              return color;","                          }","                      };","","                      /**","                       * Converts a color to the RGB string format: 'rgb(r,g,b)' or 'rgba(r,g,b,a)'","                       * @param {number|string} color","                       * @param {number}        alpha","                       * @return {string}","                       */","                      window.utils.colorToRGB = function(color, alpha) {","                          //number in octal format or string prefixed with #","                          if (typeof color === 'string' && color[0] === '#') {","                              color = window.parseInt(color.slice(1), 16);","                          }","                          alpha = (alpha === undefined) ? 1 : alpha;","                          //parse hex values","                          var r = color >> 16 & 0xff,","                              g = color >> 8 & 0xff,","                              b = color & 0xff,","                              a = (alpha < 0) ? 0 : ((alpha > 1) ? 1 : alpha);","                          //only use 'rgba' if needed","                          if (a === 1) {","                              return \"rgb(\" + r + \",\" + g + \",\" + b + \")\";","                          }","                          else {","                              return \"rgba(\" + r + \",\" + g + \",\" + b + \",\" + a + \")\";","                          }","                      };","","                      /**","                       * Determine if a rectangle contains the coordinates (x,y) within it's boundaries.","                       * @param {object}  rect  Object with properties: x, y, width, height.","                       * @param {number}  x     Coordinate position x.","                       * @param {number}  y     Coordinate position y.","                       * @return {boolean}","                       */","                      window.utils.containsPoint = function(rect, x, y) {","                          return !(x < rect.x ||","                              x > rect.x + rect.width ||","                              y < rect.y ||","                              y > rect.y + rect.height);","                      };","","                      /**","                       * Determine if two rectangles overlap.","                       * @param {object}  rectA Object with properties: x, y, width, height.","                       * @param {object}  rectB Object with properties: x, y, width, height.","                       * @return {boolean}","                       */","                      window.utils.intersects = function(rectA, rectB) {","                          return !(rectA.x + rectA.width < rectB.x ||","                              rectB.x + rectB.width < rectA.x ||","                              rectA.y + rectA.height < rectB.y ||","                              rectB.y + rectB.height < rectA.y);","                      };"]},{"action":"insertText","range":{"start":{"row":301,"column":0},"end":{"row":301,"column":22}},"text":"                      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":1,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":1,"column":0},"end":{"row":1,"column":22}},"text":"                      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":1,"column":22},"end":{"row":2,"column":0}},"text":"\n"},{"action":"insertText","range":{"start":{"row":2,"column":0},"end":{"row":2,"column":22}},"text":"                      "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"C"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":23},"end":{"row":0,"column":24}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":24},"end":{"row":0,"column":25}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":25},"end":{"row":0,"column":26}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":26},"end":{"row":0,"column":27}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":27},"end":{"row":0,"column":28}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":28},"end":{"row":0,"column":29}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":29},"end":{"row":0,"column":30}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":30},"end":{"row":0,"column":31}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":31},"end":{"row":0,"column":32}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":32},"end":{"row":0,"column":33}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":33},"end":{"row":0,"column":35}},"text":"()"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":34},"end":{"row":0,"column":36}},"text":"\"\""}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":35},"end":{"row":0,"column":36}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":36},"end":{"row":0,"column":37}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":37},"end":{"row":0,"column":38}},"text":"a"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":38},"end":{"row":0,"column":39}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":39},"end":{"row":0,"column":40}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":40},"end":{"row":0,"column":41}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":41},"end":{"row":0,"column":42}},"text":"g"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":42},"end":{"row":0,"column":43}},"text":" "}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":43},"end":{"row":0,"column":44}},"text":"u"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":44},"end":{"row":0,"column":45}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":45},"end":{"row":0,"column":46}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":46},"end":{"row":0,"column":47}},"text":"l"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":47},"end":{"row":0,"column":48}},"text":"i"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":48},"end":{"row":0,"column":49}},"text":"t"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":49},"end":{"row":0,"column":50}},"text":"y"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":50},"end":{"row":0,"column":51}},"text":"."}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":51},"end":{"row":0,"column":52}},"text":"j"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":52},"end":{"row":0,"column":53}},"text":"s"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":55},"end":{"row":0,"column":57}},"text":"''"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":55},"end":{"row":0,"column":57}},"text":"''"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":55},"end":{"row":0,"column":56}},"text":";"}]}],[{"group":"doc","deltas":[{"action":"removeText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"C"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":0,"column":22},"end":{"row":0,"column":23}},"text":"c"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":22},"end":{"row":303,"column":56}},"text":"console.log(\"loading utility.js\");"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":35},"end":{"row":303,"column":36}},"text":"d"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":36},"end":{"row":303,"column":37}},"text":"o"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":37},"end":{"row":303,"column":38}},"text":"n"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":38},"end":{"row":303,"column":39}},"text":"e"}]}],[{"group":"doc","deltas":[{"action":"insertText","range":{"start":{"row":303,"column":39},"end":{"row":303,"column":40}},"text":" "}]}]]},"ace":{"folds":[],"scrolltop":729,"scrollleft":0,"selection":{"start":{"row":282,"column":42},"end":{"row":282,"column":42},"isBackwards":false},"options":{"guessTabSize":true,"useWrapMode":false,"wrapToView":true},"firstLineState":{"row":51,"state":"start","mode":"ace/mode/javascript"}},"timestamp":1411132786852,"hash":"ebe945be86918ec125c8d8973dd4f1e0a826752b"}